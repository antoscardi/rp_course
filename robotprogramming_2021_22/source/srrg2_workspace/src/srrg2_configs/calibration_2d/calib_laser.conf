"SparseBlockLinearSolverCholeskyCSparse" { 
  "#id" : 1
 }

"CorrespondenceFinderProjective2f" { 
  "#id" : 2, 

  // min cosinus between normals
  "normal_cos" : 0.800000012, 

  // max distance between corresponding points
  "point_distance" : 0.5, 

  // projector to compute correspondences
  "projector" : { 
    "#pointer" : 3
   }
 }

"PointNormal2fProjectorPolar" { 
  "#id" : 4, 

  // end col angle    [rad]
  "angle_col_max" : 3.14159012, 

  // start col angle  [rad]
  "angle_col_min" : -3.14159012, 

  // end row angle    [rad]
  "angle_row_max" : 1.57079995, 

  // start row angle  [rad]
  "angle_row_min" : -1.57079995, 

  // maximum range [m]
  "range_max" : 20, 

  // minimum range [m]
  "range_min" : 0.300000012
 }

"PointNormal2fProjectorPolar" { 
  "#id" : 5, 

  // end col angle    [rad]
  "angle_col_max" : 3.14159012, 

  // start col angle  [rad]
  "angle_col_min" : -3.14159012, 

  // end row angle    [rad]
  "angle_row_max" : 1.57079995, 

  // start row angle  [rad]
  "angle_row_min" : -1.57079995, 

  // maximum range [m]
  "range_max" : 20, 

  // minimum range [m]
  "range_min" : 0.300000012
 }

"SimpleTerminationCriteria" { 
  "#id" : 6, 

  // ratio of decay of chi2 between iteration
  "epsilon" : 0.00100000005
 }

"RobustifierCauchy" { 
  "#id" : 7, 

  // threshold of chi after which the kernel is active
  "chi_threshold" : 0.00999999978
 }

"RobustifierCauchy" { 
  "#id" : 8, 

  // threshold of chi after which the kernel is active
  "chi_threshold" : 1
 }

"MergerProjective2D" { 
  "#id" : 9, 

  // max distance for merging the points in the scene and the moving
  "merge_threshold" : 0.200000003, 

  // projector to compute correspondences
  "projector" : { 
    "#pointer" : 4
   }
 }

"SparseBlockLinearSolverCholmodFull" { 
  "#id" : 10
 }

"PointNormal2fProjectorPolar" { 
  "#id" : 3, 

  // end col angle    [rad]
  "angle_col_max" : 3.14159012, 

  // start col angle  [rad]
  "angle_col_min" : -3.14159012, 

  // end row angle    [rad]
  "angle_row_max" : 1.57079995, 

  // start row angle  [rad]
  "angle_row_min" : -1.57079995, 

  // maximum range [m]
  "range_max" : 20, 

  // minimum range [m]
  "range_min" : 0.300000012
 }

"PointNormal2fUnprojectorPolar" { 
  "#id" : 11, 

  // end angle    [rad]
  "angle_max" : 3.14159012, 

  // start angle  [rad]
  "angle_min" : -3.14159012, 

  // minimum number of points in ball when computing a valid normal
  "normal_min_points" : 5, 

  // range of points considered while computing normal
  "normal_point_distance" : 0.200000003, 

  // number of laser beams
  "num_ranges" : 721, 

  // max laser range [m]
  "range_max" : 20, 

  // min laser range [m]
  "range_min" : 0.300000012
 }

"CalibGraph2DAssembler" { 
  "#id" : 12, 
  "name" : "calib_builder", 

  // topic for the gt odometry of the sensor motion
  "gt_odom_topic" : "/tracker_odom", 

  // topic for joint state
  "joint_state_topic" : "/joint_state", 

  // identifier for the left wheel joint
  "left_wheel_joint" : "front_right_wheel", 

  // minimum rotation to deploy measurements
  "min_rotation" : 0.150000006, 

  // minimum translation to deploy measurements
  "min_translation" : 0.300000012, 
  "push_sinks" : [  ], 

  // identifier for the right wheel joint
  "right_wheel_joint" : "front_left_wheel", 

  // topic of the robot odometry, blind without not refined by any sensors
  "robot_odom_topic" : "/odom", 

  // name of the transform tree to subscribe to
  "tf_topic" : "", 

  // if true use directly robot odometry, only sensor pose wrt robot calibration
  "use_odom" : 0
 }

"IterationAlgorithmGN" { 
  "#id" : 13, 

  // damping factor, the higher the closer to gradient descend. Default:0
  "damping" : 0
 }

"IterationAlgorithmLM" { 
  "#id" : 14, 
  "name" : "lm_alg", 

  // max lm iterations [default: 10]
  "lm_iterations_max" : 10, 

  // upper clamp for lambda if things go well
  "step_high" : 0.666666985, 

  // lower clamp for lambda if things go well 
  "step_low" : 0.333332986, 

  // scale factor for the lambda computed by the system, do not influence the one provided by the user [default: 1e-5]
  "tau" : 9.99999975e-06, 

  // initial lm lambda, if 0 is computed by system [default: 0]
  "user_lambda_init" : 0, 

  // set to true uses lambda*diag(H), otherwise uses lambda*I [default: true]
  "variable_damping" : 1
 }

"SceneClipperProjective2D" { 
  "#id" : 15, 

  // projector used to remap the points
  "projector" : { 
    "#pointer" : 5
   }, 

  // resolution used to decimate the points in the scan on a grid [meters]
  "voxelize_resolution" : 0.100000001
 }

"Solver" { 
  "#id" : 16, 
  "name" : "solver", 
  "actions" : [  ], 

  // pointer to the optimization algorithm (GN/LM or others)
  "algorithm" : { 
    "#pointer" : 14
   }, 

  // pointer to linear solver used to compute Hx=b
  "linear_solver" : { 
    "#pointer" : 1
   }, 
  "max_iterations" : [ 100 ], 

  // Minimum mean square error variation to perform global optimization
  "mse_threshold" : -1, 
  "robustifier_policies" : [ { 
  "#pointer" : 17
 } ], 

  // term criteria ptr, if 0 solver will do max iterations
  "termination_criteria" : { 
    "#pointer" : -1
   }, 

  // turn it off to make the world a better place
  "verbose" : 0
 }

"NormalComputator1DSlidingWindowNormal" { 
  "#id" : 18, 

  // max curvature
  "max_curvature" : 0.200000003, 

  // min number of points to compute a normal
  "normal_min_points" : 5, 

  // max normal point distance
  "normal_point_distance" : 0.300000012
 }

"Solver" { 
  "#id" : 19, 
  "actions" : [  ], 

  // pointer to the optimization algorithm (GN/LM or others)
  "algorithm" : { 
    "#pointer" : 13
   }, 

  // pointer to linear solver used to compute Hx=b
  "linear_solver" : { 
    "#pointer" : 10
   }, 
  "max_iterations" : [ 1 ], 

  // Minimum mean square error variation to perform global optimization
  "mse_threshold" : -1, 
  "robustifier_policies" : [  ], 

  // term criteria ptr, if 0 solver will do max iterations
  "termination_criteria" : { 
    "#pointer" : 6
   }, 

  // turn it off to make the world a better place
  "verbose" : 0
 }

"MessageROSBagSource" { 
  "#id" : 20, 
  "name" : "source", 

  // file to read
  "filename" : "put_here_the_name_od_a_bag_with_scan_and_joint_state", 
  "topics" : [ "/base_scan", "/joint_state" ], 

  // verbose
  "verbose" : 0
 }

"RawDataPreprocessorProjective2D" { 
  "#id" : 21, 

  // normal computator object
  "normal_computator_sliding" : { 
    "#pointer" : 18
   }, 

  // range_max [meters]
  "range_max" : 1000, 

  // range_min [meters]
  "range_min" : 0, 

  // topic of the scan
  "scan_topic" : "/base_scan", 

  // un-projector used to compute the scan from the cloud
  "unprojector" : { 
    "#pointer" : 11
   }, 

  // unproject voxelization resolution
  "voxelize_resolution" : 0.0199999996
 }

"MultiAligner2D" { 
  "#id" : 22, 

  // toggles additional inlier only runs if sufficient inliers are available
  "enable_inlier_only_runs" : 1, 

  // toggles removal of correspondences which factors are not inliers in the last iteration
  "keep_only_inlier_correspondences" : 0, 

  // maximum number of iterations
  "max_iterations" : 10, 

  // minimum number ofinliers
  "min_num_inliers" : 10, 
  "slice_processors" : [ { 
  "#pointer" : 23
 } ], 

  // this solver
  "solver" : { 
    "#pointer" : 19
   }, 

  // termination criteria, not set=max iterations
  "termination_criteria" : { 
    "#pointer" : -1
   }
 }

"RobustifierPolicyByType" { 
  "#id" : 17, 

  // name of the class of the matching factor
  "factor_class_name" : "DifferentialDriveOdomSensor2DErrorFactorAD", 

  // robustifier matching the rule
  "robustifier" : { 
    "#pointer" : 8
   }
 }

"MultiTracker2D" { 
  "#id" : 24, 
  "name" : "tracker", 

  // computes relative transform between fixed and moving slices
  "aligner" : { 
    "#pointer" : 22
   }, 
  "push_sinks" : [ { 
  "#pointer" : 25
 } ], 
  "slice_processors" : [ { 
  "#pointer" : 26
 } ], 

  // name of the transform tree to subscribe to
  "tf_topic" : "", 

  // name of the odom topic to propagate to the connected syncs
  "tracker_odom_topic" : "/tracker_odom"
 }

"MessageSynchronizedSink" { 
  "#id" : 25, 

  // name of the frame in the message pack
  "output_frame_id" : "pack_frame_id", 

  // name of the topic in the message pack
  "output_topic" : "pack", 
  "push_sinks" : [ { 
  "#pointer" : 12
 } ], 

  // name of the transform tree to subscribe to
  "tf_topic" : "", 

  // interval for the messages to be sinchronized
  "time_interval" : 0.10000000000000001, 
  "topics" : [ "/tracker_odom", "/joint_state" ]
 }

"AlignerSliceProcessorLaser2D" { 
  "#id" : 23, 

  // name of the base frame in the tf tree
  "base_frame_id" : "/base_link", 

  // correspondence finder used in this cue
  "finder" : { 
    "#pointer" : 2
   }, 

  // name of the slice in the fixed scene
  "fixed_slice_name" : "scan_points", 

  // name of the sensor's frame in the tf tree
  "frame_id" : "", 

  // minimum number of correspondences in this slice
  "min_num_correspondences" : 10, 

  // name of the slice in the moving scene
  "moving_slice_name" : "scene_points", 

  // robustifier used on this slice
  "robustifier" : { 
    "#pointer" : 7
   }
 }

"PipelineRunner" { 
  "#id" : 27, 
  "name" : "runner", 
  "push_sinks" : [ { 
  "#pointer" : 28
 } ], 

  // the source of the pipeline
  "source" : { 
    "#pointer" : 20
   }, 

  // name of the transform tree to subscribe to
  "tf_topic" : ""
 }

"TrackerSliceProcessorLaser2D" { 
  "#id" : 26, 

  // measurement adaptor used in the slice
  "adaptor" : { 
    "#pointer" : 21
   }, 

  // name of the base frame in the tf tree
  "base_frame_id" : "", 

  // clipper used in the slice
  "clipper" : { 
    "#pointer" : 15
   }, 

  // merger used for aligment of local maps in the slice
  "closure_merger" : { 
    "#pointer" : -1
   }, 

  // name of the sensor frame in the tf tree
  "frame_id" : "", 

  // name of the slice in the moving scene
  "measurement_slice_name" : "scan_points", 

  // merger used for aligment of a measurement to a local map in the slice
  "merger" : { 
    "#pointer" : 9
   }, 

  // name of the slice in the fixed scene
  "scene_slice_name" : "scene_points"
 }

"MessageSynchronizedSink" { 
  "#id" : 29, 

  // name of the frame in the message pack
  "output_frame_id" : "pack_frame_id", 

  // name of the topic in the message pack
  "output_topic" : "pack", 
  "push_sinks" : [ { 
  "#pointer" : 24
 } ], 

  // name of the transform tree to subscribe to
  "tf_topic" : "", 

  // interval for the messages to be sinchronized
  "time_interval" : 0.10000000000000001, 
  "topics" : [ "/base_scan" ]
 }

"MessageSortedSink" { 
  "#id" : 28, 
  "name" : "pipeline", 

  // messages older than this lag that will be blasted, no matta what
  "oblivion_interval" : 5, 
  "push_sinks" : [ { 
  "#pointer" : 29
 }, { 
  "#pointer" : 25
 } ], 

  // name of the transform tree to subscribe to
  "tf_topic" : "", 

  // lag time to sort messages
  "time_interval" : 1, 

  // if set prints crap
  "verbose" : 0
 }

